[{"content":"前言 配置文件是每个项目必不可少的部分，用来保存应用基本数据、数据库配置等信息，避免要修改一个配置项需要到处找的尴尬。这里我使用 viper 作为配置管理方案，它支持 JSON、TOML、YAML、HCL、envfile、Java properties 等多种格式的配置文件，并且能够监听配置文件的修改，进行热重载，详细介绍大家可以去官方文档查看\n安装 1 go get -u github.com/spf13/viper 编写配置文件 在项目根目录下新建一个文件 config.yaml ，初期先将项目的基本配置放入，后续我们会添加更多配置信息\n1 2 3 4 5 app: # 应用基本配置 env: local # 环境名称 port: 8888 # 服务监听端口号 app_name: gin-app # 应用名称 app_url: http://localhost # 应用域名 编写配置结构体 在项目根目录下新建文件夹 config，用于存放所有配置对应的结构体\n新建 config.go 文件，定义 Configuration 结构体，其 App 属性对应 config.yaml 中的 app\n1 2 3 4 5 package config type Configuration struct { App App `mapstructure:\u0026#34;app\u0026#34; json:\u0026#34;app\u0026#34; yaml:\u0026#34;app\u0026#34;` } 新建 app.go 文件，定义 App 结构体，其所有属性分别对应 config.yaml 中 app 下的所有配置\n1 2 3 4 5 6 7 8 package config type App struct { Env string `mapstructure:\u0026#34;env\u0026#34; json:\u0026#34;env\u0026#34; yaml:\u0026#34;env\u0026#34;` Port string `mapstructure:\u0026#34;port\u0026#34; json:\u0026#34;port\u0026#34; yaml:\u0026#34;port\u0026#34;` AppName string `mapstructure:\u0026#34;app_name\u0026#34; json:\u0026#34;app_name\u0026#34; yaml:\u0026#34;app_name\u0026#34;` AppUrl string `mapstructure:\u0026#34;app_url\u0026#34; json:\u0026#34;app_url\u0026#34; yaml:\u0026#34;app_url\u0026#34;` } 注意：配置结构体中 mapstructure 标签需对应 config.ymal 中的配置名称， viper 会根据标签 value 值把 config.yaml 的数据赋予给结构体\n全局变量 新建 global/app.go 文件，定义 Application 结构体，用来存放一些项目启动时的变量，便于调用，目前先将 viper 结构体和 Configuration 结构体放入，后续会添加其他成员属性\n1 2 3 4 5 6 7 8 9 10 11 12 13 package global import ( \u0026#34;github.com/spf13/viper\u0026#34; \u0026#34;jassue-gin/config\u0026#34; ) type Application struct { ConfigViper *viper.Viper Config config.Configuration } var App = new(Application) 使用 viper 载入配置 新建 bootstrap/config.go 文件，编写代码：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 package bootstrap import ( \u0026#34;fmt\u0026#34; \u0026#34;github.com/fsnotify/fsnotify\u0026#34; \u0026#34;github.com/spf13/viper\u0026#34; \u0026#34;jassue-gin/global\u0026#34; \u0026#34;os\u0026#34; ) func InitializeConfig() *viper.Viper { // 设置配置文件路径 config := \u0026#34;config.yaml\u0026#34; // 生产环境可以通过设置环境变量来改变配置文件路径 if configEnv := os.Getenv(\u0026#34;VIPER_CONFIG\u0026#34;); configEnv != \u0026#34;\u0026#34; { config = configEnv } // 初始化 viper v := viper.New() v.SetConfigFile(config) v.SetConfigType(\u0026#34;yaml\u0026#34;) if err := v.ReadInConfig(); err != nil { panic(fmt.Errorf(\u0026#34;read config failed: %s \\n\u0026#34;, err)) } // 监听配置文件 v.WatchConfig() v.OnConfigChange(func(in fsnotify.Event) { fmt.Println(\u0026#34;config file changed:\u0026#34;, in.Name) // 重载配置 if err := v.Unmarshal(\u0026amp;global.App.Config); err != nil { fmt.Println(err) } }) // 将配置赋值给全局变量 if err := v.Unmarshal(\u0026amp;global.App.Config); err != nil { fmt.Println(err) } return v } 初始化配置 修改 main.go 文件\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 package main import ( \u0026#34;github.com/gin-gonic/gin\u0026#34; \u0026#34;jassue-gin/bootstrap\u0026#34; \u0026#34;jassue-gin/global\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { // 初始化配置 bootstrap.InitializeConfig() r := gin.Default() // 测试路由 r.GET(\u0026#34;/ping\u0026#34;, func(c *gin.Context) { c.String(http.StatusOK, \u0026#34;pong\u0026#34;) }) // 启动服务器 r.Run(\u0026#34;:\u0026#34; + global.App.Config.App.Port) } 执行 go run main.go ，启动应用，服务器监听的端口是已经是配置文件里的端口号了\n","date":"2023-06-02T00:00:00Z","image":"https://vmaki.com/p/go-gin-2/go-gin_hu7326706ede53bd609b6cba7a608635bb_27174_120x120_fill_q75_h2_box_smart1_2.webp","permalink":"https://vmaki.com/p/go-gin-2/","title":"封装属于你的Gin框架（二）：配置初始化 \u0026 全局变量"},{"content":"前言 我是一名 phper，由于各方面因素，决定转战 Go，PHP 基本都是用来开发 Web 项目的，所以这次就使用 Go 中最流行的 Web 框架 Gin 来进行二次封装，由于它自由度很高，没办法像 PHP 框架 Laravel 开箱即用，所以就诞生了这个系列的文章，带你一步步将基础服务封装到 Gin 中，方便以后更愉快的 CURD\n适用人群 懂得安装 Go 环境及其基本语法 会使用 Go Modules 管理项目 略微有一点点点的开发经验 目录结构 文件/目录名称 说明 app/common 公共模块（请求、响应结构体等） app/controllers 业务调度器 app/middleware 中间件 app/models 数据库结构体 app/services 业务层 bootstrap 项目启动初始化 config 配置结构体 global 全局变量 routes 路由定义 static 静态资源（允许外部访问） storage 系统日志、文件等静态资源） utils 工具函数 config.yaml 配置文件 main.go 项目启动文件 初始化项目 先在 ~/go/src 目录下创建一个目录 jassue-gin 用来存放项目代码 1 mkdir ~/go/src/jassue-gin 在项目根目录下，初始化 go.mod 文件 1 go mod init jassue-gin 安装 Gin 1 go get -u github.com/gin-gonic/gin 在项目根目录下编写 main.go 文件 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 package main import ( \u0026#34;github.com/gin-gonic/gin\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { r := gin.Default() // 测试路由 r.GET(\u0026#34;/ping\u0026#34;, func(c *gin.Context) { c.String(http.StatusOK, \u0026#34;pong\u0026#34;) }) // 启动服务器 r.Run(\u0026#34;:8080\u0026#34;) } 启动应用 \u0026amp; 测试 执行 go run main.go 启动应用\n可以看到 HTTP 服务器启动成功，打开 http://127.0.0.1:8080/ping 测试路由\n","date":"2023-06-01T00:00:00Z","image":"https://vmaki.com/p/go-gin-1/go-gin_hu7326706ede53bd609b6cba7a608635bb_27174_120x120_fill_q75_h2_box_smart1_2.webp","permalink":"https://vmaki.com/p/go-gin-1/","title":"封装属于你的Gin框架（一）：开篇 \u0026 项目初始化"},{"content":"Hello, this is my new blog.\n","date":"2023-01-01T00:00:00Z","permalink":"https://vmaki.com/p/hello-world/","title":"Hello World"}]